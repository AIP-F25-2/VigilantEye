name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install linting tools
        run: |
          pip install flake8 black isort
          
      - name: Check code formatting with Black
        run: |
          black --check app/ --line-length 127
          
      - name: Check import sorting with isort
        run: |
          isort --check-only app/
          
      - name: Lint with flake8
        run: |
          flake8 app --max-line-length=127 --exclude=__pycache__

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run tests with coverage
        env:
          DATABASE_URL: mysql+pymysql://root:testpass@localhost:3306/test_db
          SECRET_KEY: test-secret-key
          JWT_SECRET_KEY: test-jwt-key
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term || echo "No tests yet"
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
